image:
  repository: quay.io/causely/chaosmania
  pullPolicy: Always
  tag: "latest"

resources:
  limits:
    cpu: 1000m
    memory: 3Gi
  requests:
    cpu: 500m
    memory: 64Mi

serviceMonitor:
  # When set true then use a serviceMonitor to configure scraping
  enabled: true

otlp:
  enabled: false
  endpoint: "" # "http://opentelemetry-collector.default:4318" ## or http://tempo.monitoring:4318
  insecure: true

datadog:
  enabled: false

hpa:
  enabled: false

encoder:
  background_services:
    - "encoder-data-broker-consumer"

upload:
  background_services:
    - "upload-message-broker-consumer"

inventory:
  background_services:
    - "inventory-message-broker-consumer"

background_services:
  # This runs the main encoder logic
  # - It consumes messages from the data broker (the video stream)
  # - Sends a message to the message broker (the video status is now encoding)
  # - Stores the video in the storage service
  # - Creates a thumbnail and stores it in the storage service
  # - Sends a message to the message broker (the video status is now encoded)
  - name: "encoder-data-broker-consumer"
    type: kafka-consumer
    config:
      tracing_service_name: data-broker
      brokers:
        - "super-heroes-kafka-brokers:9092"
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: test1
      group: encoder-group
      script: |
        function run() {
          var msg = ctx.get_message();
          var data = JSON.parse(msg);
          var video_id = data.video_id;
          var raw_data = data.raw_data;

          // Update the video status to encoding
          message_broker = ctx.get_service("data-broker-producer");
          msg = JSON.stringify({
              "video_id": video_id,
              "status": "encoding"
          });
          message_broker.produce(ctx.ctx, "video-encoding", msg);

          // Send a request to the storage service to store the video
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "videos", video_id, raw_data); 

          ctx.burn("3s")

          // Create a thumbnail
          thumbnail = ctx.random_string(1024 * 100);
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "thumbnails", video_id, thumbnail); 

          // Update the video status to encoded
          msg = JSON.stringify({
              "video_id": video_id,
              "status": "encoded"
          });
          message_broker.produce(ctx.ctx, "upload-video-encoding", msg);
          message_broker.produce(ctx.ctx, "inventory-video-encoding", msg);

          ctx.print("Encoded video: " + video_id + " " + raw_data.length + " bytes")
        }

  # This runs the main upload logic
  # - It consumes messages from the message broker (the video status, send by the encoder)
  # - Updates the video status in the upload database
  - name: "upload-message-broker-consumer"
    type: kafka-consumer
    config:
      tracing_service_name: data-broker
      brokers:
        - "super-heroes-kafka-brokers:9092"
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: upload-video-encoding
      group: upload-group
      script: |
        function run() {
          msg = ctx.get_message()
          data = JSON.parse(msg)
          video_id = data.video_id

          ctx.print("Got video status: " + video_id + " " + data.status)

          // Update the video status in the database
          upload_db = ctx.get_service("upload-db");
          upload_db.query(ctx.ctx, "UPDATE videos SET status = '" + data.status + "' WHERE id = '" + video_id + "';");
        }

  # This runs the main inventory logic
  # - It consumes messages from the message broker (the video status, send by the encoder)
  # - Updates the video status in the inventory database
  - name: "inventory-message-broker-consumer"
    type: kafka-consumer
    config:
      tracing_service_name: data-broker
      brokers:
        - "super-heroes-kafka-brokers:9092"
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: "inventory-video-encoding"
      group: inventory-group
      script: |
        function run() {
          msg = ctx.get_message()
          data = JSON.parse(msg)
          video_id = data.video_id

          // Update the video status in the database
          inventory_db = ctx.get_service("inventory-db");

          if (data.status == "encoded") {
            inventory_db.query(ctx.ctx, "CREATE TABLE IF NOT EXISTS videos (id text PRIMARY KEY, status text, created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);");
            inventory_db.query(ctx.ctx, "INSERT INTO videos (status, id) VALUES ('" + data.status + "', '" + video_id + "');");
            ctx.print("Added video to inventory: " + video_id + " " + data.status)
          }
        }


services:
  - name: auth-cache
    type: redis
    config:
      tracing_service_name: auth-cache
      address: "auth-cache:6379"

  - name: upload-db
    type: postgresql
    config:
      tracing_service_name: upload-db
      dbname: postgres
      host: upload-db
      maxidle: 10
      maxopen: 5
      password: postgres
      port: 5432
      user: postgres

  - name: inventory-db
    type: postgresql
    config:
      tracing_service_name: inventory-db
      dbname: postgres
      host: inventory-db
      maxidle: 10
      maxopen: 5
      password: postgres
      port: 5432
      user: postgres

  - name: "data-broker-producer"
    type: kafka-producer
    config:
      tracing_service_name: data-broker
      brokers:
        - "super-heroes-kafka-brokers:9092" # TODO
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false

  - name: "message-broker-producer"
    type: rabbitmq-producer
    config:
      tracing_service_name: message-broker
      url: "amqp://guest:guest@message-broker:5672/"

  - name: "storage"
    type: "minio"
    config:
      tracing_service_name: storage
      endpoint: "storage:9000"
      accesskeyid: minioadmin
      secretaccesskey: minioadmin 
      usessl: false
      buckets:
        - name: "videos"
        - name: "thumbnails"