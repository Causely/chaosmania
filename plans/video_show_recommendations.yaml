phases:
- client:
    workers:
    - delay: 2ms
      duration: 1200h
      instances: 1
  name: phase1
  setup:
    actions: []
  workload:
    actions:
    - config:
        name: Script
        script: |
          function run() {
            // Send a request for authentication
            ctx.http_post(ctx.ctx, "http://auth:8080", {actions:[{name:Script,config:{script:function run() {
              // Burn
              ctx.burn("10ms");
              auth_cache = ctx.get_service("auth-cache");
              auth_cache.set(ctx.ctx, key, value);
              auth_cache.get(ctx.ctx, key);
            }}}]});
      
            ctx.http_post(ctx.ctx, "http://recommendation:8080", {actions:[{name:Script,config:{script:function run() {
              // Send a request for authentication
              ctx.http_post(ctx.ctx, "http://inventory:8080", {actions:[{name:Script,config:{script: function run() {
                ctx.burn("10ms");
                var inventory_db = ctx.get_service("inventory-db");
                var videos = inventory_db.query(ctx.ctx, "SELECT * FROM videos ORDER BY created_at DESC LIMIT 20;");
                // Now get all the thumbnails
                var size = 0;
                storage = ctx.get_service("storage");
                for (var i = 0; i < videos.length; i++) {
                    var obj = storage.get_object(ctx.ctx, thumbnails, videos[i].id); size += obj.length;
                }
                ctx.print("Got " + videos.length + " videos with total size: " + size + " bytes");
              }}}]});
            }}}]}); 
          }
